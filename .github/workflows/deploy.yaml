name: Deploy santospedia-manutencao

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: [self-hosted, linux]

    env:
      DOCKER_CLIENT_TIMEOUT: 600
      COMPOSE_HTTP_TIMEOUT: 600

    steps:
      - name: Checkout cÃ³digo
        uses: actions/checkout@v3

      - name: Configurar Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver-opts: |
            image=moby/buildkit:latest
            network=host

      - name: Login no Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build AMD64
      - name: Build e push imagem AMD64
        run: |
          docker buildx build \
            --platform linux/amd64 \
            --buildkit-timeout=600 \
            -t ${{ secrets.DOCKER_USERNAME }}/santospedia-manutencao:amd64 \
            --push \
            --cache-from=type=registry,ref=${{ secrets.DOCKER_USERNAME }}/santospedia-manutencao:cache-amd64 \
            --cache-to=type=registry,ref=${{ secrets.DOCKER_USERNAME }}/santospedia-manutencao:cache-amd64,mode=max .

      # Build ARM64
      - name: Build e push imagem ARM64
        run: |
          docker buildx build \
            --platform linux/arm64 \
            --buildkit-timeout=600 \
            -t ${{ secrets.DOCKER_USERNAME }}/santospedia-manutencao:arm64 \
            --push \
            --cache-from=type=registry,ref=${{ secrets.DOCKER_USERNAME }}/santospedia-manutencao:cache-arm64 \
            --cache-to=type=registry,ref=${{ secrets.DOCKER_USERNAME }}/santospedia-manutencao:cache-arm64,mode=max .

      - name: Criar e publicar manifest multi-arch
        run: |
          docker manifest create ${{ secrets.DOCKER_USERNAME }}/santospedia-manutencao:latest \
            --amend ${{ secrets.DOCKER_USERNAME }}/santospedia-manutencao:amd64 \
            --amend ${{ secrets.DOCKER_USERNAME }}/santospedia-manutencao:arm64
          docker manifest push ${{ secrets.DOCKER_USERNAME }}/santospedia-manutencao:latest

      - name: Configurar kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG_DATA }}" | base64 -d > $HOME/.kube/santospedia.yaml

      - name: Testar acesso ao cluster
        run: |
          kubectl --kubeconfig=$HOME/.kube/santospedia.yaml get nodes

      - name: Aplicar Manifests no cluster (ignorar TLS)
        run: |
          kubectl --kubeconfig=$HOME/.kube/santospedia.yaml apply -f k8s/ --insecure-skip-tls-verify
